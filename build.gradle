plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

group = 'com.github.alexdev03'
version = '1.0'

repositories {
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven { url = 'https://repo.minebench.de/' }
    maven { url = 'https:/oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://libraries.minecraft.net/' }
    maven { url = 'https://repo.codemc.io/repository/maven-public/' }
    maven { url = 'https://repo.opencollab.dev/maven-public/' }
    maven { url = 'https://repo.codemc.io/repository/maven-releases/' }
    maven { url = 'https://repo.viaversion.com/' }
    maven { url = 'https://repo.opencollab.dev/main/' }
    mavenLocal()

}

dependencies {
    compileOnly "com.github.gabber235:typewriter:${typeWriterVersion}"
    compileOnly "net.kyori:adventure-api:${adventureApiVersion}"
    compileOnly "net.kyori:adventure-text-minimessage:${adventureTextMinimessageVersion}"
    compileOnly "io.papermc.paper:paper-api:${paperApiVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "me.clip:placeholderapi:${placeholderapiVersion}"
    compileOnly "io.github.miniplaceholders:miniplaceholders-api:${miniplaceholdersApiVersion}"
    compileOnly "net.kyori:adventure-api:${adventureApiVersion}"
    compileOnly "org.geysermc.floodgate:api:${floodgateApiVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "com.github.Exlll.ConfigLib:configlib-paper:${configlibPaperVersion}"
    implementation "org.jetbrains:annotations:${annotationsVersion}"
    implementation "de.themoep:minedown-adventure:${minedownAdventureVersion}"
    implementation "com.github.alexdev03:drink:${drinkVersion}"
    implementation "com.github.Tofaa2.EntityLib:spigot:${EntityLibVersion}"
    implementation "com.github.retrooper.packetevents:spigot:${packeteventsSpigotVersion}"
}


shadowJar {
    relocate 'org.jetbrains', relocator + 'jetbrains'
    relocate 'org.intellij', relocator + 'intellij'
    relocate 'de.themoep', relocator + 'themoep'
    relocate 'me.tofaa.entitylib', relocator + 'entitylib'
    relocate 'com.github.retrooper.packetevents', relocator + 'packetevents.api'
    relocate 'io.github.retrooper.packetevents', relocator + 'packetevents.impl'
    relocate 'com.jonahseguin.drink', relocator + 'drink'
    relocate 'de.exlll.configlib', relocator + 'configlib'
    relocate 'javax.annotation', relocator + 'annotation'
    relocate 'org.snakeyaml', relocator + 'snakeyaml'

    dependencies {
        exclude dependency(':slf4j-api')
        exclude dependency('com.google.code.gson:gson')
        //exclude net.kyori
        exclude 'net/kyori/**'
    }

    //mappings
    exclude 'assets/mappings/block/**'
    exclude 'assets/mappings/stats/**'
    exclude 'assets/mappings/particle/**'
    exclude 'assets/mappings/enchantment/**'

    destinationDirectory.set(file("$rootDir/target"))
    archiveClassifier.set('')

    minimize()
}


build.dependsOn shadowJar
clean.delete "$rootDir/target"

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.register('deleteClassFiles', Delete) {
    delete fileTree(directory: 'build/classes/java/main').include('**/*_1_17.class')
}


processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
