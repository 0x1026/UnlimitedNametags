plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
    id 'xyz.jpenilla.run-paper' version '2.2.2'
}

group = 'com.github.alexdev03'

repositories {
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven { url = 'https://repo.minebench.de/' }
    maven { url = 'https:/oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://libraries.minecraft.net/' }
    maven { url = 'https://repo.codemc.io/repository/maven-public/' }
    maven { url = 'https://repo.opencollab.dev/maven-public/' }
    maven { url = 'https://repo.codemc.io/repository/maven-releases/' }
    maven { url = 'https://repo.viaversion.com/' }
    maven { url = 'https://repo.opencollab.dev/main/' }
    mavenLocal()
    maven {
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compileOnly "com.github.gabber235:typewriter:${typeWriterVersion}"
    compileOnly "net.kyori:adventure-api:${adventureApiVersion}"
    compileOnly "io.papermc.paper:paper-api:${paperApiVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "me.clip:placeholderapi:${placeholderapiVersion}"
    compileOnly "io.github.miniplaceholders:miniplaceholders-api:${miniplaceholdersApiVersion}"
    compileOnly "net.kyori:adventure-api:${adventureApiVersion}"
    compileOnly "org.geysermc.floodgate:api:${floodgateApiVersion}"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "net.kyori:adventure-text-minimessage:${adventureTextMinimessageVersion}"


    implementation "com.github.Exlll.ConfigLib:configlib-paper:${configlibPaperVersion}"
    implementation "org.jetbrains:annotations:${annotationsVersion}"
    implementation "de.themoep:minedown-adventure:${minedownAdventureVersion}"
    implementation "com.github.alexdev03:drink:${drinkVersion}"
    implementation "com.github.Tofaa2.EntityLib:spigot:${EntityLibVersion}"
    compileOnly "com.github.retrooper.packetevents:spigot:${packeteventsSpigotVersion}"
    implementation "com.github.Anon8281:UniversalScheduler:${universalSchedulerVersion}"
}


shadowJar {
    relocate 'org.jetbrains', relocator + 'jetbrains'
    relocate 'org.intellij', relocator + 'intellij'
    relocate 'de.themoep', relocator + 'themoep'
    relocate 'me.tofaa.entitylib', relocator + 'entitylib'
//    relocate 'com.github.retrooper.packetevents', relocator + 'packetevents.api'
//    relocate 'io.github.retrooper.packetevents', relocator + 'packetevents.impl'
    relocate 'com.jonahseguin.drink', relocator + 'drink'
    relocate 'de.exlll.configlib', relocator + 'configlib'
    relocate 'javax.annotation', relocator + 'annotation'
    relocate 'org.snakeyaml', relocator + 'snakeyaml'
    relocate 'com.github.Anon8281.universalScheduler', relocator + 'universalScheduler'

    dependencies {
        exclude dependency(':slf4j-api')
        exclude dependency('com.google.code.gson:gson')
        exclude dependency('net.kyori:adventure-api')
        exclude dependency('net.kyori:adventure-key')
        exclude dependency('net.kyori:adventure-nbt')
        exclude dependency('net.kyori:option')
        exclude dependency('net.kyori:examination-api')
        exclude dependency('net.kyori:examination-string')
        exclude dependency('net.kyori:text')
        exclude dependency('net.kyori:adventure-text-serializer-gson')
        exclude dependency('net.kyori:adventure-text-serializer-legacy')
        exclude dependency('net.kyori:adventure-text-serializer-json')
    }

    //mappings
    exclude 'assets/mappings/block/**'
    exclude 'assets/mappings/stats/**'
    exclude 'assets/mappings/particle/**'
    exclude 'assets/mappings/enchantment/**'

    destinationDirectory.set(file("$rootDir/target"))
    archiveClassifier.set(null)
    archiveFileName.set("$project.name" + ".jar")

    minimize()
}

tasks {
    runServer {
        minecraftVersion("1.20.4")

        downloadPlugins {
            hangar("PlaceholderAPI", "2.11.5")
            url("https://cdn.modrinth.com/data/HQyibRsN/versions/J2guR3GH/MiniPlaceholders-Paper-2.2.4.jar")
            url("https://download.luckperms.net/1532/bukkit/loader/LuckPerms-Bukkit-5.4.121.jar")
            url("https://github.com/EssentialsX/Essentials/releases/download/2.20.1/EssentialsX-2.20.1.jar")
        }
    }
    runPaper.folia.registerTask() {
        minecraftVersion("1.20.4")

        downloadPlugins {
            github("Anon8281", "PlaceholderAPI", "1.1", "PlaceholderAPI-2.11.5-DEV-Folia.jar")
            url("https://cdn.modrinth.com/data/HQyibRsN/versions/J2guR3GH/MiniPlaceholders-Paper-2.2.4.jar")
            url("https://ci.lucko.me/job/LuckPerms-Folia/lastSuccessfulBuild/artifact/bukkit/loader/build/libs/LuckPerms-Bukkit-5.4.117.jar")
        }
    }
}


build.dependsOn shadowJar
clean.delete "$rootDir/target"

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.register('deleteClassFiles', Delete) {
    delete fileTree(directory: 'build/classes/java/main').include('**/*_1_17.class')
}


processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
